(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{340:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"cas与原子操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas与原子操作"}},[t._v("#")]),t._v(" CAS与原子操作")]),t._v(" "),s("h2",{attrs:{id:"乐观锁与悲观锁的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁与悲观锁的概念"}},[t._v("#")]),t._v(" 乐观锁与悲观锁的概念")]),t._v(" "),s("p",[t._v("锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种分类方式。")]),t._v(" "),s("p",[s("strong",[t._v("悲观锁：")])]),t._v(" "),s("p",[t._v("悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。")]),t._v(" "),s("p",[s("strong",[t._v("乐观锁：")])]),t._v(" "),s("p",[t._v("乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为CAS的技术来保证线程执行的安全性。")]),t._v(" "),s("p",[t._v("由于无锁操作中没有锁的存在，因此不可能出现死锁的情况，也就是说"),s("strong",[t._v("乐观锁天生免疫死锁")]),t._v("。")]),t._v(" "),s("p",[t._v("乐观锁多用于“读多写少“的环境，避免频繁加锁影响性能；而悲观锁多用于”写多读少“的环境，避免频繁失败和重试影响性能。")]),t._v(" "),s("h2",{attrs:{id:"cas的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas的概念"}},[t._v("#")]),t._v(" CAS的概念")]),t._v(" "),s("p",[t._v("CAS的全称是：比较并交换（Compare And Swap）。在CAS中，有这样三个值：")]),t._v(" "),s("ul",[s("li",[t._v("V：要更新的变量(var)")]),t._v(" "),s("li",[t._v("E：预期值(expected)")]),t._v(" "),s("li",[t._v("N：新值(new)")])]),t._v(" "),s("p",[t._v("比较并交换的过程如下：")]),t._v(" "),s("p",[t._v("判断V是否等于E，如果等于，将V的值设置为N；如果不等，说明已经有其它线程更新了V，则当前线程放弃更新，什么都不做。")]),t._v(" "),s("p",[t._v("所以这里的"),s("strong",[t._v("预期值E本质上指的是“旧值”")]),t._v("。")]),t._v(" "),s("p",[t._v("我们以一个简单的例子来解释这个过程：")]),t._v(" "),s("ol",[s("li",[t._v("如果有一个多个线程共享的变量"),s("code",[t._v("i")]),t._v("原本等于5，我现在在线程A中，想把它设置为新的值6;")]),t._v(" "),s("li",[t._v("我们使用CAS来做这个事情；")]),t._v(" "),s("li",[t._v("首先我们用i去与5对比，发现它等于5，说明没有被其它线程改过，那我就把它设置为新的值6，此次CAS成功，"),s("code",[t._v("i")]),t._v("的值被设置成了6；")]),t._v(" "),s("li",[t._v("如果不等于5，说明"),s("code",[t._v("i")]),t._v("被其它线程改过了（比如现在"),s("code",[t._v("i")]),t._v("的值为2），那么我就什么也不做，此次CAS失败，"),s("code",[t._v("i")]),t._v("的值仍然为2。")])]),t._v(" "),s("p",[t._v("在这个例子中，"),s("code",[t._v("i")]),t._v("就是V，5就是E，6就是N。")]),t._v(" "),s("p",[t._v("那有没有可能我在判断了"),s("code",[t._v("i")]),t._v("为5之后，正准备更新它的新值的时候，被其它线程更改了"),s("code",[t._v("i")]),t._v("的值呢？")]),t._v(" "),s("p",[t._v("不会的。因为CAS是一种原子操作，它是一种系统原语，是一条CPU的原子指令，从CPU层面保证它的原子性")]),t._v(" "),s("p",[s("strong",[t._v("当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。")])]),t._v(" "),s("h2",{attrs:{id:"java实现cas的原理-unsafe类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java实现cas的原理-unsafe类"}},[t._v("#")]),t._v(" Java实现CAS的原理 - Unsafe类")]),t._v(" "),s("p",[t._v("前面提到，CAS是一种原子操作。那么Java是怎样来使用CAS的呢？我们知道，在Java中，如果一个方法是native的，那Java就不负责具体实现它，而是交给底层的JVM使用c或者c++去实现。")]),t._v(" "),s("p",[t._v("在Java中，有一个"),s("code",[t._v("Unsafe")]),t._v("类，它在"),s("code",[t._v("sun.misc")]),t._v("包中。它里面是一些"),s("code",[t._v("native")]),t._v("方法，其中就有几个关于CAS的：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("当然，他们都是"),s("code",[t._v("public native")]),t._v("的。")]),t._v(" "),s("p",[t._v("Unsafe中对CAS的实现是C++写的，它的具体实现和操作系统、CPU都有关系。")]),t._v(" "),s("p",[t._v("Linux的X86下主要是通过"),s("code",[t._v("cmpxchgl")]),t._v("这个指令在CPU级完成CAS操作的，但在多处理器情况下必须使用"),s("code",[t._v("lock")]),t._v("指令加锁来完成。当然不同的操作系统和处理器的实现会有所不同，大家可以自行了解。")]),t._v(" "),s("p",[t._v("当然，Unsafe类里面还有其它方法用于不同的用途。比如支持线程挂起和恢复的"),s("code",[t._v("park")]),t._v("和"),s("code",[t._v("unpark")]),t._v("， LockSupport类底层就是调用了这两个方法。还有支持反射操作的"),s("code",[t._v("allocateInstance()")]),t._v("方法。")]),t._v(" "),s("h2",{attrs:{id:"原子操作-atomicinteger类源码简析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子操作-atomicinteger类源码简析"}},[t._v("#")]),t._v(" 原子操作-AtomicInteger类源码简析")]),t._v(" "),s("p",[t._v("上面介绍了Unsafe类的几个支持CAS的方法。那Java具体是如何使用这几个方法来实现原子操作的呢？")]),t._v(" "),s("p",[t._v("JDK提供了一些用于原子操作的类，在"),s("code",[t._v("java.util.concurrent.atomic")]),t._v("包下面。在JDK 11中，有如下17个类：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://fitminfpicgo.oss-cn-guangzhou.aliyuncs.com/picgo/202209291421385.jpg",alt:"原子类"}})]),t._v(" "),s("p",[t._v("从名字就可以看得出来这些类大概的用途：")]),t._v(" "),s("ul",[s("li",[t._v("原子更新基本类型")]),t._v(" "),s("li",[t._v("原子更新数组")]),t._v(" "),s("li",[t._v("原子更新引用")]),t._v(" "),s("li",[t._v("原子更新字段（属性）")])]),t._v(" "),s("p",[t._v("这里我们以"),s("code",[t._v("AtomicInteger")]),t._v("类的"),s("code",[t._v("getAndAdd(int delta)")]),t._v("方法为例，来看看Java是如何实现原子操作的。")]),t._v(" "),s("p",[t._v("先看看这个方法的源码：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" delta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这里的U其实就是一个"),s("code",[t._v("Unsafe")]),t._v("对象：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jdk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("internal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Unsafe")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jdk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("internal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Unsafe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUnsafe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("所以其实"),s("code",[t._v("AtomicInteger")]),t._v("类的"),s("code",[t._v("getAndAdd(int delta)")]),t._v("方法是调用"),s("code",[t._v("Unsafe")]),t._v("类的方法来实现的：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HotSpotIntrinsicCandidate")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" delta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntVolatile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("weakCompareAndSetInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" delta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("blockquote",[s("p",[t._v("注：这个方法是在JDK 1.8才新增的。在JDK1.8之前，"),s("code",[t._v("AtomicInteger")]),t._v("源码实现有所不同，是基于for死循环的，有兴趣的读者可以自行了解一下。")])]),t._v(" "),s("p",[t._v("我们来一步步解析这段源码。首先，对象"),s("code",[t._v("o")]),t._v("是"),s("code",[t._v("this")]),t._v("，也就是一个"),s("code",[t._v("AtomicInteger")]),t._v("对象。然后"),s("code",[t._v("offset")]),t._v("是一个常量"),s("code",[t._v("VALUE")]),t._v("。这个常量是在"),s("code",[t._v("AtomicInteger")]),t._v("类中声明的：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objectFieldOffset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("同样是调用的"),s("code",[t._v("Unsafe")]),t._v("的方法。从方法名字上来看，是得到了一个对象字段偏移量。")]),t._v(" "),s("blockquote",[s("p",[t._v("用于获取某个字段相对Java对象的“起始地址”的偏移量。")]),t._v(" "),s("p",[t._v("一个java对象可以看成是一段内存，各个字段都得按照一定的顺序放在这段内存里，同时考虑到对齐要求，可能这些字段不是连续放置的，")]),t._v(" "),s("p",[t._v("用这个方法能准确地告诉你某个字段相对于对象的起始内存地址的字节偏移量，因为是相对偏移量，所以它其实跟某个具体对象又没什么太大关系，跟class的定义和虚拟机的内存模型的实现细节更相关。")])]),t._v(" "),s("p",[t._v("继续看源码。前面我们讲到，CAS是“无锁”的基础，它允许更新失败。所以经常会与while循环搭配，在失败后不断去重试。")]),t._v(" "),s("p",[t._v("这里声明了一个v，也就是要返回的值。从"),s("code",[t._v("getAndAddInt")]),t._v("来看，它返回的应该是原来的值，而新的值的"),s("code",[t._v("v + delta")]),t._v("。")]),t._v(" "),s("p",[t._v("这里使用的是"),s("strong",[t._v("do-while循环")]),t._v("。这种循环不多见，它的目的是"),s("strong",[t._v("保证循环体内的语句至少会被执行一遍")]),t._v("。这样才能保证return 的值"),s("code",[t._v("v")]),t._v("是我们期望的值。")]),t._v(" "),s("p",[t._v("循环体的条件是一个CAS方法：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("weakCompareAndSetInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("可以看到，最终其实是调用的我们之前说到了CAS "),s("code",[t._v("native")]),t._v("方法。那为什么要经过一层"),s("code",[t._v("weakCompareAndSetInt")]),t._v("呢？从JDK源码上看不出来什么。在JDK 8及之前的版本，这两个方法是一样的。")]),t._v(" "),s("blockquote",[s("p",[t._v("而在JDK 9开始，这两个方法上面增加了@HotSpotIntrinsicCandidate注解。这个注解允许HotSpot VM自己来写汇编或IR编译器来实现该方法以提供性能。也就是说虽然外面看到的在JDK9中weakCompareAndSet和compareAndSet底层依旧是调用了一样的代码，但是不排除HotSpot VM会手动来实现weakCompareAndSet真正含义的功能的可能性。")])]),t._v(" "),s("p",[t._v("根据本文第一篇参考文章（文末链接），它跟"),s("code",[t._v("volatile")]),t._v("有关。")]),t._v(" "),s("p",[t._v("简单来说，"),s("code",[t._v("weakCompareAndSet")]),t._v("操作仅保留了"),s("code",[t._v("volatile")]),t._v("自身变量的特性，而除去了happens-before规则带来的内存语义。也就是说，"),s("code",[t._v("weakCompareAndSet")]),t._v("**无法保证处理操作目标的volatile变量外的其他变量的执行顺序( 编译器和处理器为了优化程序性能而对指令序列进行重新排序 )，同时也无法保证这些变量的可见性。**这在一定程度上可以提高性能。")]),t._v(" "),s("p",[t._v("再回到循环条件上来，可以看到它是在不断尝试去用CAS更新。如果更新失败，就继续重试。那为什么要把获取“旧值”v的操作放到循环体内呢？其实这也很好理解。前面我们说了，CAS如果旧值V不等于预期值E，它就会更新失败。说明旧的值发生了变化。那我们当然需要返回的是被其他线程改变之后的旧值了，因此放在了do循环体内。")]),t._v(" "),s("h2",{attrs:{id:"cas实现原子操作的三大问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas实现原子操作的三大问题"}},[t._v("#")]),t._v(" CAS实现原子操作的三大问题")]),t._v(" "),s("p",[t._v("这里介绍一下CAS实现原子操作的三大问题及其解决方案。")]),t._v(" "),s("h3",{attrs:{id:"aba问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aba问题"}},[t._v("#")]),t._v(" ABA问题")]),t._v(" "),s("p",[t._v("所谓ABA问题，就是一个值原来是A，变成了B，又变回了A。这个时候使用CAS是检查不出变化的，但实际上却被更新了两次。")]),t._v(" "),s("p",[t._v("ABA问题的解决思路是在变量前面追加上"),s("strong",[t._v("版本号或者时间戳")]),t._v("。从JDK 1.5开始，JDK的atomic包里提供了一个类"),s("code",[t._v("AtomicStampedReference")]),t._v("类来解决ABA问题。")]),t._v(" "),s("p",[t._v("这个类的"),s("code",[t._v("compareAndSet")]),t._v("方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果二者都相等，才使用CAS设置为新的值和标志。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v("   expectedReference"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v("   newReference"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expectedStamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newStamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pair"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        expectedReference "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reference "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        expectedStamp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stamp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newReference "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reference "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n          newStamp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("casPair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newReference"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h3",{attrs:{id:"循环时间长开销大"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环时间长开销大"}},[t._v("#")]),t._v(" 循环时间长开销大")]),t._v(" "),s("p",[t._v("CAS多与自旋结合。如果自旋CAS长时间不成功，会占用大量的CPU资源。")]),t._v(" "),s("p",[t._v("解决思路是让JVM支持处理器提供的"),s("strong",[t._v("pause指令")]),t._v("。")]),t._v(" "),s("p",[t._v("pause指令能让自旋失败时cpu睡眠一小段时间再继续自旋，从而使得读操作的频率低很多,为解决内存顺序冲突而导致的CPU流水线重排的代价也会小很多。")]),t._v(" "),s("h3",{attrs:{id:"只能保证一个共享变量的原子操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只能保证一个共享变量的原子操作"}},[t._v("#")]),t._v(" 只能保证一个共享变量的原子操作")]),t._v(" "),s("p",[t._v("这个问题你可能已经知道怎么解决了。有两种解决方案：")]),t._v(" "),s("ol",[s("li",[t._v("使用JDK 1.5开始就提供的"),s("code",[t._v("AtomicReference")]),t._v("类保证对象之间的原子性，把多个变量放到一个对象里面进行CAS操作；")]),t._v(" "),s("li",[t._v("使用锁。锁内的临界区代码可以保证只有当前线程能操作。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);